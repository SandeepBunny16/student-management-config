# =================================================================
# SERVICE REGISTRY DETAILED CONFIGURATION
# Retrieved from Config Server for centralized management
# =================================================================

# =================================================================
# SERVER CONFIGURATION
# =================================================================
# What: Network and performance settings for the Eureka Server
# Why: Optimizes server performance and enables monitoring features

# --- Basic Server Settings ---
server.port=8761
spring.application.name=service-registry

# --- Performance Optimization ---
# What: Enables GZIP compression for HTTP responses
# Why: Reduces network traffic and improves response times
server.compression.enabled=true
server.compression.min-response-size=1024
server.compression.mime-types=application/json,application/xml,text/html

# =================================================================
# EUREKA SERVER CORE CONFIGURATION
# =================================================================
# What: Core settings that control how Eureka Server behaves
# Why: These settings determine service discovery behavior and performance

# --- Self Registration (Critical Setting) ---
# What: Prevents Eureka Server from registering itself as a client
# Why: The server IS the registry, so it shouldn't register with itself
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

# --- Service Discovery URL ---
# What: The URL where client services can find this Eureka Server
# Why: All microservices use this URL to register themselves
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

# --- Self Preservation Mode (Development Setting) ---
# What: Disables Eureka's protection against network partition problems
# Why: In development, we want to see services disappear immediately when stopped
eureka.server.enable-self-preservation=false

# --- Service Eviction (Development Optimized) ---
# What: How often Eureka removes unhealthy services from registry
# Why: Faster removal helps us see problems quickly during development
eureka.server.eviction-interval-timer-in-ms=10000

# =================================================================
# CLIENT SERVICE BEHAVIOR SETTINGS
# =================================================================
# What: Default settings for services that register with this Eureka Server
# Why: Controls how often services send heartbeats and update information

# --- Heartbeat Configuration ---
# What: How often client services send "I'm alive" messages
# Why: Frequent heartbeats help detect service failures quickly
eureka.instance.lease-renewal-interval-in-seconds=10

# --- Lease Expiration ---
# What: How long Eureka waits without heartbeat before marking service as down
# Why: Quick expiration removes failed services from registry promptly
eureka.instance.lease-expiration-duration-in-seconds=30

# --- Instance Identification ---
# What: Use IP addresses instead of hostnames for service identification
# Why: More reliable in containerized and cloud environments
eureka.instance.prefer-ip-address=true

# =================================================================
# DASHBOARD CONFIGURATION
# =================================================================
# What: Settings for the Eureka web dashboard
# Why: The dashboard is essential for monitoring registered services

# --- Dashboard Activation ---
# What: Enables the web-based Eureka dashboard
# Why: Provides visual interface for monitoring service registry
eureka.dashboard.enabled=true
eureka.dashboard.path=/

# --- Response Caching (Development Optimized) ---
# What: How long Eureka caches responses before refreshing
# Why: Faster cache updates show service changes more quickly in development
eureka.server.response-cache-auto-expiration-in-seconds=30
eureka.server.response-cache-update-interval-ms=10000

# =================================================================
# SECURITY CONFIGURATION (Same as Config Server)
# =================================================================
# What: Basic authentication settings for Eureka Server access
# Why: Protects service registry from unauthorized access

# --- Authentication Credentials ---
# What: Username and password for accessing Eureka dashboard and APIs
# Why: Same approach as Config Server for consistency
spring.security.user.name=eureka-admin
spring.security.user.password=eureka123
spring.security.user.roles=ADMIN

# =================================================================
# LOGGING CONFIGURATION
# =================================================================
# What: Detailed logging configuration for debugging and monitoring
# Why: Helps track Eureka operations and troubleshoot issues

# --- Application Logging ---
# What: Log levels for different parts of the system
# Why: Balanced logging that shows important information without spam
logging.level.com.sandeep=DEBUG
logging.level.com.netflix.eureka=INFO
logging.level.com.netflix.discovery=INFO
logging.level.org.springframework.cloud.netflix.eureka=INFO
logging.level.root=INFO

# --- Log File Configuration ---
# What: Where to save log files and how to manage them
# Why: Persistent logs help with debugging and monitoring over time
logging.file.name=logs/service-registry.log
logging.file.max-size=10MB
logging.file.max-history=30

# --- Log Format ---
# What: Template for formatting each log message
# Why: Consistent, readable format makes logs easier to analyze
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.console=%d{HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# =================================================================
# ACTUATOR MONITORING CONFIGURATION
# =================================================================
# What: Settings for Spring Boot Actuator monitoring endpoints
# Why: Essential for health checking and operational monitoring

# --- Available Endpoints ---
# What: Which monitoring endpoints to expose via HTTP
# Why: These endpoints provide essential monitoring information
management.endpoints.web.exposure.include=health,info,metrics,eureka

# --- Health Check Configuration ---
# What: How much detail to include in health check responses
# Why: Detailed health info helps with automated monitoring and debugging
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always

# --- Management Port ---
# What: Use same port for management endpoints as main application
# Why: Simplifies configuration and access during development
management.server.port=8761

# =================================================================
# DEVELOPMENT OPTIMIZATION SETTINGS
# =================================================================
# What: Settings optimized for development and learning
# Why: Makes development faster and debugging easier

# --- Network Timeouts ---
# What: How long to wait for network operations
# Why: Shorter timeouts help detect problems quickly during development
eureka.server.peer-eureka-nodes-update-interval-ms=10000
eureka.server.peer-eureka-status-refresh-time-interval-ms=10000

# --- Warning Suppression ---
# What: Disables unnecessary warnings for development
# Why: Reduces console noise during development
eureka.client.webclient.enabled=false
