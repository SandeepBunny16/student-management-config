# =================================================================
# EUREKA SERVER DETAILED CONFIGURATION
# Retrieved from Config Server for centralized management
# =================================================================

# =================================================================
# SERVER CONFIGURATION
# =================================================================
# What: Detailed server settings for the Eureka Server
# Why: These settings control how the server behaves and performs

# --- Server Identity ---
server.port=8761
spring.application.name=service-registry

# --- Performance Settings ---
# What: Enables HTTP response compression using GZIP
# Why: Compressing responses makes communication faster, especially for large service registries
server.compression.enabled=true
server.compression.min-response-size=1024
server.compression.mime-types=application/json,application/xml,text/html

# =================================================================
# EUREKA SERVER CORE SETTINGS
# =================================================================
# What: Core Eureka Server configuration that controls service discovery behavior
# Why: These settings determine how services register, how often they check in, and how the registry behaves

# --- Self Registration (Eureka Server shouldn't register with itself) ---
# What: Controls whether this Eureka Server registers itself as a service
# Why: The registry itself doesn't need to be registered - it IS the registry
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

# --- Service URL Configuration ---
# What: The URL where client services can find this Eureka Server
# Why: All microservices need to know where to register themselves
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

# --- Self Preservation Mode ---
# What: Eureka's protection against network partition problems
# Why: In development, we can disable this to see services disappear immediately when they stop
# How: In production, this should be 'true' to prevent mass service deregistration during network issues
eureka.server.enable-self-preservation=false

# --- Eviction Settings ---
# What: How often Eureka checks for and removes unhealthy services
# Why: Faster eviction in development helps us see problems quickly
eureka.server.eviction-interval-timer-in-ms=15000

# =================================================================
# CLIENT BEHAVIOR SETTINGS (For services that register with this server)
# =================================================================
# What: Default settings that client services will inherit when they register
# Why: These settings control how often services send heartbeats and update their information

# --- Heartbeat Settings ---
# What: How often client services send "I'm alive" messages to Eureka
# Why: Frequent heartbeats help detect service failures quickly
eureka.instance.lease-renewal-interval-in-seconds=10

# --- Lease Expiration ---
# What: How long Eureka waits without a heartbeat before considering a service dead
# Why: Quick expiration helps remove failed services from the registry fast
eureka.instance.lease-expiration-duration-in-seconds=30

# --- Instance Settings ---
# What: How services should identify themselves when registering
# Why: Using IP addresses instead of hostnames works better in containerized environments
eureka.instance.prefer-ip-address=true

# =================================================================
# DASHBOARD AND WEB UI CONFIGURATION
# =================================================================
# What: Settings for the Eureka web dashboard that shows registered services
# Why: The dashboard is a valuable tool for monitoring and debugging service registration

# --- Dashboard Path ---
# What: The URL path where the Eureka dashboard can be accessed
# Why: Standard path that developers expect to find the dashboard
eureka.dashboard.path=/

# --- Enable Dashboard ---
# What: Should the web-based dashboard be available?
# Why: The dashboard is very helpful for monitoring services during development and troubleshooting
eureka.dashboard.enabled=true

# =================================================================
# SECURITY CONFIGURATION
# =================================================================
# What: Security settings for the Eureka Server
# Why: We want to secure the registry while allowing legitimate services to register

# --- Basic Authentication ---
# What: Username and password for accessing Eureka endpoints
# Why: Prevents unauthorized access to service registry information
spring.security.user.name=eureka-admin
spring.security.user.password=eureka123
spring.security.user.roles=EUREKA_USER

# =================================================================
# LOGGING CONFIGURATION
# =================================================================
# What: Detailed logging settings for monitoring and debugging
# Why: Good logging helps us understand what's happening and troubleshoot problems

# --- Log Levels ---
# What: How much detail to log for different parts of the system
# Why: We want detailed information about Eureka operations but not too much noise from other components
logging.level.com.sandeep=DEBUG
logging.level.com.netflix.eureka=INFO
logging.level.com.netflix.discovery=INFO
logging.level.org.springframework.cloud.netflix.eureka=INFO
logging.level.root=INFO

# --- Log File Configuration ---
# What: Where to save log messages and how to manage the log files
# Why: Persistent logs help with troubleshooting and monitoring over time
logging.file.name=logs/service-registry.log
logging.file.max-size=10MB
logging.file.max-history=30

# --- Log Format ---
# What: The format template for each log message
# Why: Consistent, readable format makes logs easier to analyze
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.console=%d{HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# =================================================================
# ACTUATOR MONITORING CONFIGURATION
# =================================================================
# What: Settings for Spring Boot Actuator endpoints (health checks, metrics, etc.)
# Why: Monitoring is essential for production systems

# --- Exposed Endpoints ---
# What: Which monitoring endpoints should be available via HTTP
# Why: These specific endpoints provide the most useful information for Service Registry monitoring
management.endpoints.web.exposure.include=health,info,metrics,eureka

# --- Health Check Details ---
# What: How much information to include in health check responses
# Why: Detailed health information helps with debugging and automated monitoring
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always

# --- Management Port ---
# What: Use the same port for management endpoints as the main application
# Why: Simplifies configuration and access during development
management.server.port=8761

# =================================================================
# DEVELOPMENT-SPECIFIC SETTINGS
# =================================================================
# What: Settings that are specific to the development environment
# Why: Development needs different settings than production for easier testing and debugging

# --- Quick Service Removal ---
# What: Remove services from registry quickly when they stop
# Why: During development, we want to see changes immediately
eureka.server.response-cache-auto-expiration-in-seconds=30
eureka.server.response-cache-update-interval-ms=5000

# --- Network Timeouts ---
# What: How long to wait for network operations
# Why: Short timeouts help detect problems quickly during development
eureka.server.peer-eureka-nodes-update-interval-ms=10000
eureka.server.peer-eureka-status-refresh-time-interval-ms=10000
